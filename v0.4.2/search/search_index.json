{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#unkeypy","title":"unkey.py","text":"<p>An asynchronous Python SDK for unkey.dev.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Stable</li> <li>Development</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Python version 3.8 or greater is required to use unkey.py.</p>"},{"location":"#stable","title":"Stable","text":"<pre><code>pip install -U unkey.py\n</code></pre>"},{"location":"#development","title":"Development","text":"<pre><code>pip install -U git+https://github.com/Jonxslays/unkey.py\n</code></pre> <p>For more information on using <code>pip</code>, check out the pip documentation.</p>"},{"location":"#example","title":"Example","text":"<pre><code>import asyncio\nimport os\nimport unkey\nasync def main() -&gt; None:\nclient = unkey.Client(api_key=os.environ[\"API_KEY\"])\nawait client.start()\nresult = await client.keys.verify_key(\"prefix_123ABC\")\nif result.is_ok:\ndata = result.unwrap()\nprint(data.valid)\nprint(data.owner_id)\nprint(data.meta)\nprint(data.error)\nelse:\nprint(result.unwrap_err())\nawait client.close()\nif __name__ == \"__main__\":\nasyncio.run(main())\n</code></pre>"},{"location":"#what-is-unkeydev","title":"What is unkey.dev","text":"<p>unkey.dev is a fully open source API key management solution. It allows you to create, manage, and validate API keys for your applications users. You can even host it yourself, that's the beauty of open source.</p> <p>If you're interested in learning more about the project, consider checking out any of these links:</p> <ul> <li>Website</li> <li>API documentation</li> <li>Github repository</li> <li>Discord community</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>unkey.py is open to contributions. Check out the contributing guide to learn how.</p>"},{"location":"#license","title":"License","text":"<p>unkey.py is licensed under the GPLv3 License.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#v042-aug-2023","title":"v0.4.2 (Aug 2023)","text":""},{"location":"changelog/#additions","title":"Additions","text":"<ul> <li>Add <code>RatelimitState</code> model.</li> <li>Add <code>ratelimit</code> and <code>expires</code> fields to <code>ApiKeyVerification</code>.</li> </ul>"},{"location":"changelog/#v041-aug-2023","title":"v0.4.1 (Aug 2023)","text":""},{"location":"changelog/#changes","title":"Changes","text":"<ul> <li><code>UNDEFINED</code> is now guaranteed to be a singleton, preventing <code>id(obj)</code> mismatches.</li> </ul>"},{"location":"changelog/#bugfixes","title":"Bugfixes","text":"<ul> <li><code>Client.start()</code> now correctly initializes a new client session if called   after closing the client previously.</li> </ul>"},{"location":"changelog/#additions_1","title":"Additions","text":"<ul> <li>Tests :).</li> </ul>"},{"location":"changelog/#v040-jul-2023","title":"v0.4.0 (Jul 2023)","text":""},{"location":"changelog/#additions_2","title":"Additions","text":"<ul> <li>Add <code>UNDEFINED</code>, <code>UndefinedOr</code>, and <code>UndefinedNoneOr</code> types.</li> <li>Add <code>update_key</code> method to key service.</li> <li>Add <code>name</code> parameter to the <code>create_key</code> method.</li> </ul>"},{"location":"changelog/#changes_1","title":"Changes","text":"<ul> <li>Refactor existing methods to use the new <code>UNDEFINED</code> type.</li> </ul>"},{"location":"changelog/#v030-jul-2023","title":"v0.3.0 (Jul 2023)","text":""},{"location":"changelog/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Remove debug print statement in <code>list_keys</code>.</li> </ul>"},{"location":"changelog/#additions_3","title":"Additions","text":"<ul> <li>Add <code>ErrorCode</code> enum.</li> <li>Add <code>remaining</code> parameter to <code>create_key</code>.</li> <li>Add <code>remaining</code> field to <code>ApiKeyVerification</code> and <code>ApiKeyMeta</code> models.</li> <li>Add <code>code</code> field to <code>ApiKeyVerification</code> model.</li> <li>Add <code>code</code> field to <code>HttpResponse</code> model.</li> </ul>"},{"location":"changelog/#changes_2","title":"Changes","text":"<ul> <li>Update status code for <code>revoke_key</code> to 200 OK.</li> </ul>"},{"location":"changelog/#v020-jun-2023","title":"v0.2.0 (Jun 2023)","text":""},{"location":"changelog/#additions_4","title":"Additions","text":"<ul> <li>Add <code>Client</code>, <code>KeyService</code> and <code>ApiService</code>.</li> <li>Add <code>Serializer</code>, and other necessary base services.</li> <li>Add relevant models.</li> <li>Add support for all publicly documented endpoints:</li> <li>Get API</li> <li>List Keys</li> <li>Create Key</li> <li>Verify Key</li> <li>Revoke Key</li> </ul>"},{"location":"changelog/#v010-jun-2023","title":"v0.1.0 (Jun 2023)","text":"<ul> <li>Initial release!</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Thanks for your interest in unkey.py! Here are some tips for contributing.</p>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<ul> <li>If you have an idea, but are unsure on the proper implementation - open an issue.</li> <li>Implementations should be well tested before opening a pull request.</li> <li>Max code line length of 99, max docs line length of 80.</li> <li>Code should be written in black's code style.</li> <li>Code should be PEP 8 compliant.</li> <li>Use informative commit messages.</li> </ul>"},{"location":"contributing/#installing-poetry","title":"Installing poetry","text":"<p>unkey.py uses Poetry for dependency management.</p> <p>Check out poetry's full installation guide for detailed instructions if you aren't familiar with it.</p>"},{"location":"contributing/#installing-dependencies","title":"Installing dependencies","text":"<ol> <li>Create a fork of unkey.py, and clone the fork to your local machine.</li> <li>Change directory into the project dir.</li> <li>Run <code>poetry shell</code> to create a new virtual environment, and activate it.</li> <li>Run <code>poetry install</code> to install dependencies (this includes dev deps).</li> </ol>"},{"location":"contributing/#writing-code","title":"Writing code","text":"<ol> <li>Check out a new branch to commit your work to, e.g. <code>git checkout -b bugfix/typing-errors</code>.</li> <li>Make your changes, then run <code>nox</code> and address any issues that arise.</li> <li>Commit your work, using an informative commit message.</li> <li>Open a pull request into the master branch of this repository.</li> </ol> <p>After submitting your PR, it will be reviewed (and hopefully merged!). Thanks again for taking the time to read this contributing guide, and for your interest in unkey.py. I look forward to working with you.</p>"},{"location":"license/","title":"License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.  We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors.  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights.  Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software.  For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so.  This is fundamentally incompatible with the aim of protecting users' freedom to change the software.  The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable.  Therefore, we have designed this version of the GPL to prohibit the practice for those products.  If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary.  To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Use with the GNU Affero General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.  But first, please read https://www.gnu.org/licenses/why-not-lgpl.html.</p>"},{"location":"getting-started/client/","title":"Using the client","text":"<p>The <code>Client</code> class is used to interact with the unkey API. You use the client to make requests.</p>"},{"location":"getting-started/client/#instantiating-the-client","title":"Instantiating the client","text":"<pre><code>import unkey\nclient = unkey.Client(\n\"api_abc123\",  # The root api key to use.\napi_version=1,\napi_base_url=\"https://api.unkey.dev\",\n)\n</code></pre> <p>Api version and base url are both optional. The client defaults to api v1 and the production unkey api url. If you are running a local instance of the api you can set the base url to your instance.</p>"},{"location":"getting-started/client/#handling-client-resources","title":"Handling client resources","text":"<p>The unkey <code>Client</code> uses an <code>aiohttp.ClientSession</code> under the hood, so it is important that you call <code>Client.start</code> and <code>Client.close</code> appropriately.</p> <pre><code># ...continued from above\nawait client.start()\n# Make requests here...\nawait client.close()\n</code></pre> <p>You will receive errors/warnings if you do not properly starting the client before using it, or closing it before your program terminates.</p>"},{"location":"getting-started/client/#example-client-usage","title":"Example client usage","text":"<pre><code>import asyncio\nimport os\nimport unkey\nasync def main() -&gt; None:\nclient = unkey.Client(api_key=os.environ[\"API_KEY\"])\nawait client.start()\n# 10 requests/second\nratelimit = unkey.Ratelimit(\nunkey.RatelimitType.Fast,\nlimit=10,\nrefill_rate=10,\nrefill_interval=1000,\n)\nresult = await client.keys.create_key(\nos.environ[\"API_ID\"],\n\"jonxslays\",  # user id\n\"test\",  # prefix\nbyte_length=32,\nratelimit=ratelimit,\nmeta={\"is_cool\": True},\nexpires=9600 * 1000,  # 9600 seconds in the future\n)\nif result.is_ok:\ndata = result.unwrap()\nprint(data.key_id)\nprint(data.key)\nelse:\nprint(result.unwrap_err())\nawait client.close()\nif __name__ == \"__main__\":\nasyncio.run(main())\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Python version 3.8 or greater is required to use unkey.py.</p>"},{"location":"getting-started/installation/#stable","title":"Stable","text":"<pre><code>pip install -U unkey.py\n</code></pre>"},{"location":"getting-started/installation/#development","title":"Development","text":"<pre><code>pip install -U git+https://github.com/Jonxslays/unkey.py\n</code></pre> <p>For more information on using <code>pip</code>, check out the pip documentation.</p> <p>You can verify your installation succeeded with the <code>unkeypy</code> command. The output should look similar to this:</p> <pre><code>unkey.py v0.2.0 from [HEAD]\n@ /path/to/unkey.py/installation\nCPython 3.11.3 GCC 13.1.1 20230429\nLinux love 6.1.34-1-lts x86_64\n#1 SMP PREEMPT_DYNAMIC Wed, 14 Jun 2023 17:36:07 +0000\n</code></pre>"},{"location":"getting-started/result/","title":"The result type","text":"<p>Those of you familiar with Rust will feel right at home with the <code>Result</code> type this library implements. All requests that go out over the network via the <code>Client</code> come back to you in the form of a <code>Result</code>. The result can be one of two things: an <code>Ok</code> or an <code>Err</code>.</p>"},{"location":"getting-started/result/#correct-usage","title":"Correct usage","text":"<pre><code>client = unkey.Client(\"unkey_123\")\nawait client.start()\nresult = await client.keys.verify_key(\"test_123\")\nif result.is_ok:\nprint(result.unwrap())\nelse:\nprint(result.unwrap_err())\n</code></pre>"},{"location":"getting-started/result/#incorrect-usage","title":"Incorrect usage","text":"<pre><code>client = unkey.Client()\nawait client.start()\nresult = await client.keys.create_key(\n\"api_123abc\",\n\"jonxslays\",\n\"test\",\nbyte_length=-1,\n)\nprint(result.unwrap()) # &lt;-- Exception raised\n# Raises UnwrapError because byte length can not be -1.\n</code></pre>"},{"location":"reference/client/","title":"client","text":""},{"location":"reference/client/#unkey.client.Client","title":"Client","text":"<p>An asynchronous client used for interacting with the API.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The root api key to use for requests.</p> required <p>Other Parameters:</p> Name Type Description <code>api_version</code> <code>t.Optional[int]</code> <p>The api version to access. Defaults to 1.</p> <code>api_base_url</code> <code>t.Optional[str]</code> <p>The base url to use for the api (no trailing /). Defaults to <code>https://api.unkey.dev</code>.</p> Source code in <code>unkey/client.py</code> <pre><code>class Client:\n\"\"\"An asynchronous client used for interacting with the API.\n    Args:\n        api_key: The root api key to use for requests.\n    Keyword Args:\n        api_version: The api version to access. Defaults to 1.\n        api_base_url: The base url to use for the api (no trailing /).\n            Defaults to `https://api.unkey.dev`.\n    \"\"\"\n__slots__ = (\n\"_apis\",\n\"_http\",\n\"_keys\",\n\"_serializer\",\n)\ndef __init__(\nself,\napi_key: str,\n*,\napi_version: t.Optional[int] = None,\napi_base_url: t.Optional[str] = None,\n) -&gt; None:\nself._serializer = serializer.Serializer()\nself._http = services.HttpService(api_key, api_version, api_base_url)\nself.__init_core_services()\ndef __init_core_services(self) -&gt; None:\nself._apis = self.__init_service(services.ApiService)\nself._keys = self.__init_service(services.KeyService)\ndef __init_service(self, service: t.Type[ServiceT]) -&gt; ServiceT:\nif not issubclass(service, services.BaseService):\nraise TypeError(f\"{service.__name__!r} can not be initialized as a service.\")\nreturn service(self._http, self._serializer)  # type: ignore[return-value]\n@property\ndef keys(self) -&gt; services.KeyService:\n\"\"\"The key service used to make key related requests.\"\"\"\nreturn self._keys\n@property\ndef apis(self) -&gt; services.ApiService:\n\"\"\"The api service used to make api related requests.\"\"\"\nreturn self._apis\ndef set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n        Args:\n            api_key: The new root api key to use for requests.\n        \"\"\"\nself._http.set_api_key(api_key)\ndef set_api_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n        Args:\n            base_url: The new api base url to use for requests.\n        \"\"\"\nself._http.set_base_url(base_url)\nasync def start(self) -&gt; None:\n\"\"\"Starts the client session to be used for http requests.\"\"\"\nawait self._http.start()\nasync def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#unkey.client.Client.apis","title":"apis  <code>property</code>","text":"<pre><code>apis: services.ApiService\n</code></pre> <p>The api service used to make api related requests.</p>"},{"location":"reference/client/#unkey.client.Client.keys","title":"keys  <code>property</code>","text":"<pre><code>keys: services.KeyService\n</code></pre> <p>The key service used to make key related requests.</p>"},{"location":"reference/client/#unkey.client.Client.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Closes the existing client session, if it's still open.</p> Source code in <code>unkey/client.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#unkey.client.Client.set_api_base_url","title":"set_api_base_url","text":"<pre><code>set_api_base_url(base_url: str) -&gt; None\n</code></pre> <p>Sets the api base url used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The new api base url to use for requests.</p> required Source code in <code>unkey/client.py</code> <pre><code>def set_api_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n    Args:\n        base_url: The new api base url to use for requests.\n    \"\"\"\nself._http.set_base_url(base_url)\n</code></pre>"},{"location":"reference/client/#unkey.client.Client.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(api_key: str) -&gt; None\n</code></pre> <p>Sets the api key used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The new root api key to use for requests.</p> required Source code in <code>unkey/client.py</code> <pre><code>def set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n    Args:\n        api_key: The new root api key to use for requests.\n    \"\"\"\nself._http.set_api_key(api_key)\n</code></pre>"},{"location":"reference/client/#unkey.client.Client.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Starts the client session to be used for http requests.</p> Source code in <code>unkey/client.py</code> <pre><code>async def start(self) -&gt; None:\n\"\"\"Starts the client session to be used for http requests.\"\"\"\nawait self._http.start()\n</code></pre>"},{"location":"reference/errors/","title":"errors","text":""},{"location":"reference/errors/#unkey.errors.BaseError","title":"BaseError","text":"<p>             Bases: <code>Exception</code></p> <p>The base error all unkey errors inherit from.</p> Source code in <code>unkey/errors.py</code> <pre><code>class BaseError(Exception):\n\"\"\"The base error all unkey errors inherit from.\"\"\"\n__slots__ = ()\n</code></pre>"},{"location":"reference/errors/#unkey.errors.MissingRequiredArgument","title":"MissingRequiredArgument","text":"<p>             Bases: <code>BaseError</code></p> <p>Raised when a required argument is missing.</p> Source code in <code>unkey/errors.py</code> <pre><code>class MissingRequiredArgument(BaseError):\n\"\"\"Raised when a required argument is missing.\"\"\"\n__slots__ = ()\ndef __init__(self, message: str) -&gt; None:\nsuper().__init__(f\"Missing required argument: {message}\")\n</code></pre>"},{"location":"reference/errors/#unkey.errors.UnwrapError","title":"UnwrapError","text":"<p>             Bases: <code>BaseError</code></p> <p>Raised when calling unwrap or unwrap_err incorrectly.</p> Source code in <code>unkey/errors.py</code> <pre><code>class UnwrapError(BaseError):\n\"\"\"Raised when calling unwrap or unwrap_err incorrectly.\"\"\"\n__slots__ = ()\ndef __init__(self, message: str) -&gt; None:\nsuper().__init__(f\"Unwrap failed: {message}\")\n</code></pre>"},{"location":"reference/models/","title":"models","text":""},{"location":"reference/models/#unkey.models.Api","title":"Api","text":"<p>             Bases: <code>BaseModel</code></p> <p>Data representing a particular ratelimit.</p> Source code in <code>unkey/models/apis.py</code> <pre><code>@attrs.define(init=False, weakref_slot=False)\nclass Api(BaseModel):\n\"\"\"Data representing a particular ratelimit.\"\"\"\nid: str\n\"\"\"The id for this api.\"\"\"\nname: str\n\"\"\"The name of the api.\"\"\"\nworkspace_id: str\n\"\"\"The id for the workspace this api belongs to.\"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.apis.Api.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre> <p>The id for this api.</p>"},{"location":"reference/models/#unkey.models.apis.Api.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the api.</p>"},{"location":"reference/models/#unkey.models.apis.Api.workspace_id","title":"workspace_id  <code>instance-attribute</code>","text":"<pre><code>workspace_id: str\n</code></pre> <p>The id for the workspace this api belongs to.</p>"},{"location":"reference/models/#unkey.models.ApiKey","title":"ApiKey","text":"<p>             Bases: <code>BaseModel</code></p> <p>Minimal representation of an api key.</p> Source code in <code>unkey/models/keys.py</code> <pre><code>@attrs.define(init=False, weakref_slot=False)\nclass ApiKey(BaseModel):\n\"\"\"Minimal representation of an api key.\"\"\"\nkey_id: str\n\"\"\"The id of this key stored at unkey.\"\"\"\nkey: str\n\"\"\"The api key itself.\"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.keys.ApiKey.key","title":"key  <code>instance-attribute</code>","text":"<pre><code>key: str\n</code></pre> <p>The api key itself.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKey.key_id","title":"key_id  <code>instance-attribute</code>","text":"<pre><code>key_id: str\n</code></pre> <p>The id of this key stored at unkey.</p>"},{"location":"reference/models/#unkey.models.ApiKeyList","title":"ApiKeyList","text":"<p>             Bases: <code>BaseModel</code></p> <p>Data representing keys for an api.</p> Source code in <code>unkey/models/apis.py</code> <pre><code>@attrs.define(init=False, weakref_slot=False)\nclass ApiKeyList(BaseModel):\n\"\"\"Data representing keys for an api.\"\"\"\nkeys: t.List[ApiKeyMeta]\n\"\"\"A list of keys associated with the api.\"\"\"\ntotal: int\n\"\"\"The total number of keys associated with the api.\"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.apis.ApiKeyList.keys","title":"keys  <code>instance-attribute</code>","text":"<pre><code>keys: t.List[ApiKeyMeta]\n</code></pre> <p>A list of keys associated with the api.</p>"},{"location":"reference/models/#unkey.models.apis.ApiKeyList.total","title":"total  <code>instance-attribute</code>","text":"<pre><code>total: int\n</code></pre> <p>The total number of keys associated with the api.</p>"},{"location":"reference/models/#unkey.models.ApiKeyMeta","title":"ApiKeyMeta","text":"<p>             Bases: <code>BaseModel</code></p> <p>Metadata about an api key.</p> Source code in <code>unkey/models/keys.py</code> <pre><code>@attrs.define(init=False, weakref_slot=False)\nclass ApiKeyMeta(BaseModel):\n\"\"\"Metadata about an api key.\"\"\"\nid: str\n\"\"\"The id of this key.\"\"\"\napi_id: str\n\"\"\"The id of the api this key belongs to.\"\"\"\nworkspace_id: str\n\"\"\"The id of the workspace this key belongs to.\"\"\"\nstart: str\n\"\"\"The prefix and beginning 3 letters of the key.\"\"\"\ncreated_at: int\n\"\"\"The unix epoch representing when this key was created in\n    milliseconds.\"\"\"\nowner_id: t.Optional[str]\n\"\"\"The owner of this api key if one was specified.\"\"\"\nexpires: t.Optional[int]\n\"\"\"The optional unix epoch representing when this key expires in\n    milliseconds.\"\"\"\nratelimit: t.Optional[Ratelimit]\n\"\"\"The optional ratelimit associated with this key.\"\"\"\nmeta: t.Optional[t.Dict[str, t.Any]]\n\"\"\"The dynamic mapping of data used during key creation, if\n    the key was found.\n    \"\"\"\nremaining: t.Optional[int]\n\"\"\"The remaining verifications before this key is invalidated.\n    If `None`, this field was not used in the keys creation and can\n    be ignored.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.api_id","title":"api_id  <code>instance-attribute</code>","text":"<pre><code>api_id: str\n</code></pre> <p>The id of the api this key belongs to.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: int\n</code></pre> <p>The unix epoch representing when this key was created in milliseconds.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.expires","title":"expires  <code>instance-attribute</code>","text":"<pre><code>expires: t.Optional[int]\n</code></pre> <p>The optional unix epoch representing when this key expires in milliseconds.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre> <p>The id of this key.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.meta","title":"meta  <code>instance-attribute</code>","text":"<pre><code>meta: t.Optional[t.Dict[str, t.Any]]\n</code></pre> <p>The dynamic mapping of data used during key creation, if the key was found.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.owner_id","title":"owner_id  <code>instance-attribute</code>","text":"<pre><code>owner_id: t.Optional[str]\n</code></pre> <p>The owner of this api key if one was specified.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.ratelimit","title":"ratelimit  <code>instance-attribute</code>","text":"<pre><code>ratelimit: t.Optional[Ratelimit]\n</code></pre> <p>The optional ratelimit associated with this key.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.remaining","title":"remaining  <code>instance-attribute</code>","text":"<pre><code>remaining: t.Optional[int]\n</code></pre> <p>The remaining verifications before this key is invalidated. If <code>None</code>, this field was not used in the keys creation and can be ignored.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: str\n</code></pre> <p>The prefix and beginning 3 letters of the key.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyMeta.workspace_id","title":"workspace_id  <code>instance-attribute</code>","text":"<pre><code>workspace_id: str\n</code></pre> <p>The id of the workspace this key belongs to.</p>"},{"location":"reference/models/#unkey.models.ApiKeyVerification","title":"ApiKeyVerification","text":"<p>             Bases: <code>BaseModel</code></p> <p>Data about whether this api key is valid.</p> Source code in <code>unkey/models/keys.py</code> <pre><code>@attrs.define(init=False, weakref_slot=False)\nclass ApiKeyVerification(BaseModel):\n\"\"\"Data about whether this api key is valid.\"\"\"\nvalid: bool\n\"\"\"Whether or not this key is valid and passes ratelimit.\"\"\"\nowner_id: t.Optional[str]\n\"\"\"The id of the owner for this key, if the key was found.\"\"\"\nmeta: t.Optional[t.Dict[str, t.Any]]\n\"\"\"Dynamic mapping of data used during key creation, if the\n    key was found.\n    \"\"\"\nremaining: t.Optional[int]\n\"\"\"The remaining verifications before this key is invalidated.\n    If `None`, this field was not used in the keys creation and can\n    be ignored.\n    \"\"\"\nexpires: t.Optional[int]\n\"\"\"The unix epoch in milliseconds indicating when this key expires,\n    if it does.\"\"\"\nratelimit: t.Optional[RatelimitState]\n\"\"\"The state of the ratelimit set on this key, if any.\"\"\"\ncode: t.Optional[ErrorCode]\n\"\"\"The optional error code returned by the unkey api.\"\"\"\nerror: t.Optional[str]\n\"\"\"The error message if the key was invalid.\"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: t.Optional[ErrorCode]\n</code></pre> <p>The optional error code returned by the unkey api.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.error","title":"error  <code>instance-attribute</code>","text":"<pre><code>error: t.Optional[str]\n</code></pre> <p>The error message if the key was invalid.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.expires","title":"expires  <code>instance-attribute</code>","text":"<pre><code>expires: t.Optional[int]\n</code></pre> <p>The unix epoch in milliseconds indicating when this key expires, if it does.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.meta","title":"meta  <code>instance-attribute</code>","text":"<pre><code>meta: t.Optional[t.Dict[str, t.Any]]\n</code></pre> <p>Dynamic mapping of data used during key creation, if the key was found.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.owner_id","title":"owner_id  <code>instance-attribute</code>","text":"<pre><code>owner_id: t.Optional[str]\n</code></pre> <p>The id of the owner for this key, if the key was found.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.ratelimit","title":"ratelimit  <code>instance-attribute</code>","text":"<pre><code>ratelimit: t.Optional[RatelimitState]\n</code></pre> <p>The state of the ratelimit set on this key, if any.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.remaining","title":"remaining  <code>instance-attribute</code>","text":"<pre><code>remaining: t.Optional[int]\n</code></pre> <p>The remaining verifications before this key is invalidated. If <code>None</code>, this field was not used in the keys creation and can be ignored.</p>"},{"location":"reference/models/#unkey.models.keys.ApiKeyVerification.valid","title":"valid  <code>instance-attribute</code>","text":"<pre><code>valid: bool\n</code></pre> <p>Whether or not this key is valid and passes ratelimit.</p>"},{"location":"reference/models/#unkey.models.BaseEnum","title":"BaseEnum","text":"<p>             Bases: <code>Enum</code></p> <p>The base enum all library enums inherit from.</p> Source code in <code>unkey/models/base.py</code> <pre><code>class BaseEnum(Enum):\n\"\"\"The base enum all library enums inherit from.\"\"\"\n__slots__ = ()\nvalue: str  # pyright: ignore\ndef __str__(self) -&gt; str:\nreturn self.value\n@classmethod\ndef from_str(cls: t.Type[T], value: str) -&gt; T:\n\"\"\"Generate this enum from the given value.\n        Args:\n            value: The value to generate from.\n        Returns:\n            The generated enum.\n        \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError as e:\nraise ValueError(\nf\"{e} variant. Please report this issue on github at \"\n\"https://github.com/Jonxslays/unkey.py/issues/new\"\n) from None\n@classmethod\ndef from_str_maybe(cls: t.Type[T], value: str) -&gt; t.Optional[T]:\n\"\"\"Attempt to generate this enum from the given value.\n        Args:\n            value: The value to generate from.\n        Returns:\n            The generated enum or `None` if the value was not a valid\n                enum variant.\n        \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError:\nreturn None\n</code></pre>"},{"location":"reference/models/#unkey.models.base.BaseEnum.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(value: str) -&gt; T\n</code></pre> <p>Generate this enum from the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to generate from.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The generated enum.</p> Source code in <code>unkey/models/base.py</code> <pre><code>@classmethod\ndef from_str(cls: t.Type[T], value: str) -&gt; T:\n\"\"\"Generate this enum from the given value.\n    Args:\n        value: The value to generate from.\n    Returns:\n        The generated enum.\n    \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError as e:\nraise ValueError(\nf\"{e} variant. Please report this issue on github at \"\n\"https://github.com/Jonxslays/unkey.py/issues/new\"\n) from None\n</code></pre>"},{"location":"reference/models/#unkey.models.base.BaseEnum.from_str_maybe","title":"from_str_maybe  <code>classmethod</code>","text":"<pre><code>from_str_maybe(value: str) -&gt; t.Optional[T]\n</code></pre> <p>Attempt to generate this enum from the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to generate from.</p> required <p>Returns:</p> Type Description <code>t.Optional[T]</code> <p>The generated enum or <code>None</code> if the value was not a valid enum variant.</p> Source code in <code>unkey/models/base.py</code> <pre><code>@classmethod\ndef from_str_maybe(cls: t.Type[T], value: str) -&gt; t.Optional[T]:\n\"\"\"Attempt to generate this enum from the given value.\n    Args:\n        value: The value to generate from.\n    Returns:\n        The generated enum or `None` if the value was not a valid\n            enum variant.\n    \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError:\nreturn None\n</code></pre>"},{"location":"reference/models/#unkey.models.BaseModel","title":"BaseModel","text":"<p>The base model all library models inherit from.</p> Source code in <code>unkey/models/base.py</code> <pre><code>@attrs.define(weakref_slot=False)\nclass BaseModel:\n\"\"\"The base model all library models inherit from.\"\"\"\ndef to_dict(self) -&gt; t.Dict[str, t.Any]:\n\"\"\"Converts this class into a dictionary.\n        Returns:\n            The requested dictionary.\n        \"\"\"\nreturn attrs.asdict(self)\n</code></pre>"},{"location":"reference/models/#unkey.models.base.BaseModel.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; t.Dict[str, t.Any]\n</code></pre> <p>Converts this class into a dictionary.</p> <p>Returns:</p> Type Description <code>t.Dict[str, t.Any]</code> <p>The requested dictionary.</p> Source code in <code>unkey/models/base.py</code> <pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n\"\"\"Converts this class into a dictionary.\n    Returns:\n        The requested dictionary.\n    \"\"\"\nreturn attrs.asdict(self)\n</code></pre>"},{"location":"reference/models/#unkey.models.HttpResponse","title":"HttpResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Directly represents a response from the api.</p> <p>Could indicate either success or failure.</p> Source code in <code>unkey/models/http.py</code> <pre><code>@attrs.define(weakref_slot=False)\nclass HttpResponse(BaseModel):\n\"\"\"Directly represents a response from the api.\n    Could indicate either success or failure.\n    \"\"\"\nstatus: int\n\"\"\"The HTTP status code.\"\"\"\nmessage: str\n\"\"\"The error or success message.\"\"\"\ncode: t.Optional[ErrorCode] = None\n\"\"\"The optional error code returned by the unkey api.\"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.http.HttpResponse.code","title":"code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code: t.Optional[ErrorCode] = None\n</code></pre> <p>The optional error code returned by the unkey api.</p>"},{"location":"reference/models/#unkey.models.http.HttpResponse.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The error or success message.</p>"},{"location":"reference/models/#unkey.models.http.HttpResponse.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code.</p>"},{"location":"reference/models/#unkey.models.Ratelimit","title":"Ratelimit","text":"<p>             Bases: <code>BaseModel</code></p> <p>Data representing a particular ratelimit.</p> Source code in <code>unkey/models/keys.py</code> <pre><code>@attrs.define(weakref_slot=False)\nclass Ratelimit(BaseModel):\n\"\"\"Data representing a particular ratelimit.\"\"\"\ntype: RatelimitType\n\"\"\"The type of ratelimiting to implement.\"\"\"\nlimit: int\n\"\"\"The total amount of burstable requests.\"\"\"\nrefill_rate: int\n\"\"\"How many tokens to refill during each refill interval.\"\"\"\nrefill_interval: int\n\"\"\"The speed at which tokens are refilled.\"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.keys.Ratelimit.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit: int\n</code></pre> <p>The total amount of burstable requests.</p>"},{"location":"reference/models/#unkey.models.keys.Ratelimit.refill_interval","title":"refill_interval  <code>instance-attribute</code>","text":"<pre><code>refill_interval: int\n</code></pre> <p>The speed at which tokens are refilled.</p>"},{"location":"reference/models/#unkey.models.keys.Ratelimit.refill_rate","title":"refill_rate  <code>instance-attribute</code>","text":"<pre><code>refill_rate: int\n</code></pre> <p>How many tokens to refill during each refill interval.</p>"},{"location":"reference/models/#unkey.models.keys.Ratelimit.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: RatelimitType\n</code></pre> <p>The type of ratelimiting to implement.</p>"},{"location":"reference/models/#unkey.models.RatelimitState","title":"RatelimitState","text":"<p>             Bases: <code>BaseModel</code></p> <p>The state of the ratelimit for a given key.</p> Source code in <code>unkey/models/keys.py</code> <pre><code>@attrs.define(init=False, weakref_slot=False)\nclass RatelimitState(BaseModel):\n\"\"\"The state of the ratelimit for a given key.\"\"\"\nlimit: int\n\"\"\"The number of burstable requests allowed.\"\"\"\nremaining: int\n\"\"\"The remaining requests in this burst window.\"\"\"\nreset: int\n\"\"\"The unix timestamp in milliseconds until the next window.\"\"\"\n</code></pre>"},{"location":"reference/models/#unkey.models.keys.RatelimitState.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit: int\n</code></pre> <p>The number of burstable requests allowed.</p>"},{"location":"reference/models/#unkey.models.keys.RatelimitState.remaining","title":"remaining  <code>instance-attribute</code>","text":"<pre><code>remaining: int\n</code></pre> <p>The remaining requests in this burst window.</p>"},{"location":"reference/models/#unkey.models.keys.RatelimitState.reset","title":"reset  <code>instance-attribute</code>","text":"<pre><code>reset: int\n</code></pre> <p>The unix timestamp in milliseconds until the next window.</p>"},{"location":"reference/result/","title":"result","text":""},{"location":"reference/result/#unkey.result.Result","title":"Result","text":"<p>             Bases: <code>t.Generic[T, E]</code>, <code>abc.ABC</code></p> <p>Represents a potential <code>Ok</code> or <code>Err</code> result.</p> Note <p>This class can not be instantiated, only its variants can.</p> Source code in <code>unkey/result.py</code> <pre><code>class Result(t.Generic[T, E], abc.ABC):\n\"\"\"Represents a potential `Ok` or `Err` result.\n    Note:\n        This class can not be instantiated, only its variants can.\n    \"\"\"\n__slots__ = (\"_error\", \"_value\")\ndef __repr__(self) -&gt; str:\ninner = self._value if self.is_ok else self._error  # type: ignore [attr-defined]\nreturn f\"{self.__class__.__name__}({inner})\"\n@property\n@abc.abstractmethod\ndef is_ok(self) -&gt; bool:\n\"\"\"`True` if this result is the `Ok` variant.\"\"\"\n@property\n@abc.abstractmethod\ndef is_err(self) -&gt; bool:\n\"\"\"`True` if this result is the `Err` variant.\"\"\"\n@abc.abstractmethod\ndef unwrap(self) -&gt; T:\n\"\"\"Unwraps the result to produce the value.\n        Returns:\n            The unwrapped value.\n        Raises:\n            UnwrapError: If the result was an `Err` and not `Ok`.\n        \"\"\"\n@abc.abstractmethod\ndef unwrap_err(self) -&gt; E:\n\"\"\"Unwraps the result to produce the error.\n        Returns:\n            The unwrapped error.\n        Raises:\n            UnwrapError: If the result was `Ok` and not an `Err`.\n        \"\"\"\n</code></pre>"},{"location":"reference/result/#unkey.result.Result.is_err","title":"is_err  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>is_err: bool\n</code></pre> <p><code>True</code> if this result is the <code>Err</code> variant.</p>"},{"location":"reference/result/#unkey.result.Result.is_ok","title":"is_ok  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>is_ok: bool\n</code></pre> <p><code>True</code> if this result is the <code>Ok</code> variant.</p>"},{"location":"reference/result/#unkey.result.Result.unwrap","title":"unwrap  <code>abstractmethod</code>","text":"<pre><code>unwrap() -&gt; T\n</code></pre> <p>Unwraps the result to produce the value.</p> <p>Returns:</p> Type Description <code>T</code> <p>The unwrapped value.</p> <p>Raises:</p> Type Description <code>UnwrapError</code> <p>If the result was an <code>Err</code> and not <code>Ok</code>.</p> Source code in <code>unkey/result.py</code> <pre><code>@abc.abstractmethod\ndef unwrap(self) -&gt; T:\n\"\"\"Unwraps the result to produce the value.\n    Returns:\n        The unwrapped value.\n    Raises:\n        UnwrapError: If the result was an `Err` and not `Ok`.\n    \"\"\"\n</code></pre>"},{"location":"reference/result/#unkey.result.Result.unwrap_err","title":"unwrap_err  <code>abstractmethod</code>","text":"<pre><code>unwrap_err() -&gt; E\n</code></pre> <p>Unwraps the result to produce the error.</p> <p>Returns:</p> Type Description <code>E</code> <p>The unwrapped error.</p> <p>Raises:</p> Type Description <code>UnwrapError</code> <p>If the result was <code>Ok</code> and not an <code>Err</code>.</p> Source code in <code>unkey/result.py</code> <pre><code>@abc.abstractmethod\ndef unwrap_err(self) -&gt; E:\n\"\"\"Unwraps the result to produce the error.\n    Returns:\n        The unwrapped error.\n    Raises:\n        UnwrapError: If the result was `Ok` and not an `Err`.\n    \"\"\"\n</code></pre>"},{"location":"reference/routes/","title":"routes","text":""},{"location":"reference/routes/#unkey.routes.CompiledRoute","title":"CompiledRoute","text":"<p>A route that has been compiled to include uri variables.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>Route</code> <p>The route itself.</p> required <code>uri</code> <code>str</code> <p>The endpoint for this route.</p> required Source code in <code>unkey/routes.py</code> <pre><code>@attrs.define(weakref_slot=False)\nclass CompiledRoute:\n\"\"\"A route that has been compiled to include uri variables.\n    Args:\n        route: The route itself.\n        uri: The endpoint for this route.\n    \"\"\"\nroute: Route\n\"\"\"The route itself.\"\"\"\nuri: str\n\"\"\"The routes uri endpoint.\"\"\"\nparams: t.Dict[str, t.Union[str, int]] = attrs.field(init=False)\n\"\"\"The query params for the route.\"\"\"\ndef __init__(self, route: Route, uri: str) -&gt; None:\nself.route = route\nself.uri = uri\nself.params = {}\n@property\ndef method(self) -&gt; str:\n\"\"\"The routes method, i.e. GET, POST...\"\"\"\nreturn self.route.method\ndef with_params(self, params: t.Dict[str, t.Any]) -&gt; CompiledRoute:\n\"\"\"Adds additional query params to this compiled route.\n        Args:\n            params: The query params to compile.\n        Returns:\n            The compiled route for chained calls.\n        \"\"\"\nif params:\nself.params.update(params)\nreturn self\n</code></pre>"},{"location":"reference/routes/#unkey.routes.CompiledRoute.method","title":"method  <code>property</code>","text":"<pre><code>method: str\n</code></pre> <p>The routes method, i.e. GET, POST...</p>"},{"location":"reference/routes/#unkey.routes.CompiledRoute.params","title":"params  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>params: t.Dict[str, t.Union[str, int]] = {}\n</code></pre> <p>The query params for the route.</p>"},{"location":"reference/routes/#unkey.routes.CompiledRoute.route","title":"route  <code>instance-attribute</code>","text":"<pre><code>route: Route = route\n</code></pre> <p>The route itself.</p>"},{"location":"reference/routes/#unkey.routes.CompiledRoute.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str = uri\n</code></pre> <p>The routes uri endpoint.</p>"},{"location":"reference/routes/#unkey.routes.CompiledRoute.with_params","title":"with_params","text":"<pre><code>with_params(params: t.Dict[str, t.Any]) -&gt; CompiledRoute\n</code></pre> <p>Adds additional query params to this compiled route.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>t.Dict[str, t.Any]</code> <p>The query params to compile.</p> required <p>Returns:</p> Type Description <code>CompiledRoute</code> <p>The compiled route for chained calls.</p> Source code in <code>unkey/routes.py</code> <pre><code>def with_params(self, params: t.Dict[str, t.Any]) -&gt; CompiledRoute:\n\"\"\"Adds additional query params to this compiled route.\n    Args:\n        params: The query params to compile.\n    Returns:\n        The compiled route for chained calls.\n    \"\"\"\nif params:\nself.params.update(params)\nreturn self\n</code></pre>"},{"location":"reference/routes/#unkey.routes.Route","title":"Route","text":"<p>A route that has not been compiled yet.</p> Source code in <code>unkey/routes.py</code> <pre><code>@attrs.define(weakref_slot=False)\nclass Route:\n\"\"\"A route that has not been compiled yet.\"\"\"\nmethod: str\n\"\"\"The request method to use.\"\"\"\nuri: str\n\"\"\"The request uri.\"\"\"\ndef compile(self, *args: t.Union[str, int]) -&gt; CompiledRoute:\n\"\"\"Turn this route into a compiled route.\n        Args:\n            *args: The arguments to insert into the uri.\n        Returns:\n            The compiled route.\n        \"\"\"\ncompiled = CompiledRoute(self, self.uri)\nfor arg in args:\ncompiled.uri = compiled.uri.replace(r\"{}\", str(arg), 1)\nreturn compiled\n</code></pre>"},{"location":"reference/routes/#unkey.routes.Route.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method: str\n</code></pre> <p>The request method to use.</p>"},{"location":"reference/routes/#unkey.routes.Route.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre> <p>The request uri.</p>"},{"location":"reference/routes/#unkey.routes.Route.compile","title":"compile","text":"<pre><code>compile(*args: t.Union[str, int]) -&gt; CompiledRoute\n</code></pre> <p>Turn this route into a compiled route.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>t.Union[str, int]</code> <p>The arguments to insert into the uri.</p> <code>()</code> <p>Returns:</p> Type Description <code>CompiledRoute</code> <p>The compiled route.</p> Source code in <code>unkey/routes.py</code> <pre><code>def compile(self, *args: t.Union[str, int]) -&gt; CompiledRoute:\n\"\"\"Turn this route into a compiled route.\n    Args:\n        *args: The arguments to insert into the uri.\n    Returns:\n        The compiled route.\n    \"\"\"\ncompiled = CompiledRoute(self, self.uri)\nfor arg in args:\ncompiled.uri = compiled.uri.replace(r\"{}\", str(arg), 1)\nreturn compiled\n</code></pre>"},{"location":"reference/serializer/","title":"serializer","text":""},{"location":"reference/serializer/#unkey.serializer.Serializer","title":"Serializer","text":"<p>Deserializes JSON data into wom.py model classes.</p> Source code in <code>unkey/serializer.py</code> <pre><code>class Serializer:\n\"\"\"Deserializes JSON data into wom.py model classes.\"\"\"\n__slots__ = ()\ndef _dt_from_iso(self, timestamp: str) -&gt; datetime:\nreturn datetime.fromisoformat(timestamp.rstrip(\"Z\"))\ndef _dt_from_iso_maybe(self, timestamp: t.Optional[str]) -&gt; t.Optional[datetime]:\nreturn self._dt_from_iso(timestamp) if timestamp else None\ndef to_camel_case(self, attr: str) -&gt; str:\nfirst, *rest = attr.split(\"_\")\nreturn \"\".join((first.lower(), *map(str.title, rest)))\ndef _set_attrs(\nself,\nmodel: t.Any,\ndata: DictT,\n*attrs: str,\ntransform: TransformT = None,\ncamel_case: bool = False,\nmaybe: bool = False,\n) -&gt; None:\nif transform and maybe:\nraise RuntimeError(\"Only one of 'maybe' and 'transform' may be used.\")\nfor attr in attrs:\ncased_attr = self.to_camel_case(attr) if camel_case else attr\nif transform:\nsetattr(\nmodel,\nattr,\ntransform(data.get(cased_attr, None) if maybe else data[cased_attr]),\n)\nelse:\nsetattr(model, attr, data.get(cased_attr, None) if maybe else data[cased_attr])\ndef _set_attrs_cased(\nself,\nmodel: t.Any,\ndata: DictT,\n*attrs: str,\ntransform: TransformT = None,\nmaybe: bool = False,\n) -&gt; None:\nself._set_attrs(model, data, *attrs, transform=transform, camel_case=True, maybe=maybe)\ndef to_api_key(self, data: DictT) -&gt; models.ApiKey:\nmodel = models.ApiKey()\nself._set_attrs_cased(model, data, \"key\", \"key_id\")\nreturn model\ndef to_api_key_verification(self, data: DictT) -&gt; models.ApiKeyVerification:\nmodel = models.ApiKeyVerification()\nratelimit = data.get(\"ratelimit\")\nmodel.ratelimit = self.to_ratelimit_state(ratelimit) if ratelimit else ratelimit\nmodel.code = models.ErrorCode.from_str_maybe(data.get(\"code\", \"\"))\nself._set_attrs_cased(\nmodel, data, \"valid\", \"owner_id\", \"meta\", \"remaining\", \"error\", \"expires\", maybe=True\n)\nreturn model\ndef to_ratelimit_state(self, data: DictT) -&gt; models.RatelimitState:\nmodel = models.RatelimitState()\nself._set_attrs(model, data, \"reset\", \"limit\", \"remaining\")\nreturn model\ndef to_api(self, data: DictT) -&gt; models.Api:\nmodel = models.Api()\nself._set_attrs_cased(model, data, \"id\", \"name\", \"workspace_id\")\nreturn model\ndef to_ratelimit(self, data: DictT) -&gt; models.Ratelimit:\nreturn models.Ratelimit(\nlimit=data[\"limit\"],\nrefill_rate=data[\"refillRate\"],\nrefill_interval=data[\"refillInterval\"],\ntype=models.RatelimitType.from_str(data[\"type\"]),\n)\ndef to_api_key_meta(self, data: DictT) -&gt; models.ApiKeyMeta:\nmodel = models.ApiKeyMeta()\nratelimit = data.get(\"ratelimit\")\nmodel.ratelimit = self.to_ratelimit(ratelimit) if ratelimit else ratelimit\nself._set_attrs_cased(\nmodel,\ndata,\n\"id\",\n\"meta\",\n\"start\",\n\"api_id\",\n\"expires\",\n\"remaining\",\n\"owner_id\",\n\"created_at\",\n\"workspace_id\",\nmaybe=True,\n)\nreturn model\ndef to_api_key_list(self, data: DictT) -&gt; models.ApiKeyList:\nmodel = models.ApiKeyList()\nmodel.total = data[\"total\"]\nmodel.keys = [self.to_api_key_meta(key) for key in data[\"keys\"]]\nreturn model\n</code></pre>"},{"location":"reference/services/","title":"services","text":""},{"location":"reference/services/#unkey.services.ApiService","title":"ApiService","text":"<p>             Bases: <code>BaseService</code></p> <p>Handles api related requests.</p> Source code in <code>unkey/services/apis.py</code> <pre><code>class ApiService(BaseService):\n\"\"\"Handles api related requests.\"\"\"\n__slots__ = ()\nasync def get_api(self, api_id: str) -&gt; ResultT[models.Api]:\n\"\"\"Gets information about an api.\n        Args:\n            api_id: The id of the api.\n        Returns:\n            A result containing the requested information or an error.\n        \"\"\"\nroute = routes.GET_API.compile(api_id)\ndata = await self._http.fetch(route)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nif \"error\" in data:\nreturn result.Err(\nmodels.HttpResponse(\n404,\ndata[\"error\"],\nmodels.ErrorCode.from_str_maybe(data.get(\"code\", \"unknown\")),\n)\n)\nreturn result.Ok(self._serializer.to_api(data))\nasync def list_keys(\nself,\napi_id: str,\n*,\nowner_id: UndefinedOr[str] = UNDEFINED,\nlimit: int = 100,\noffset: int = 0,\n) -&gt; ResultT[models.ApiKeyList]:\n\"\"\"Gets a paginated list of keys for the given api.\n        Args:\n            api_id: The id of the api.\n        Keyword Args:\n            owner_id: The optional owner id to list the keys for.\n            limit: The max number of keys to include in this page.\n                Defaults to 100.\n            offset: How many keys to offset by, for pagination.\n        Returns:\n            A result containing api key list or an error.\n        \"\"\"\nparams = self._generate_map(ownerId=owner_id, limit=limit, offset=offset)\nroute = routes.GET_KEYS.compile(api_id).with_params(params)\ndata = await self._http.fetch(route)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nif \"error\" in data:\nreturn result.Err(\nmodels.HttpResponse(\n404,\ndata[\"error\"],\nmodels.ErrorCode.from_str_maybe(data.get(\"code\", \"unknown\")),\n)\n)\nreturn result.Ok(self._serializer.to_api_key_list(data))\n</code></pre>"},{"location":"reference/services/#unkey.services.apis.ApiService.get_api","title":"get_api  <code>async</code>","text":"<pre><code>get_api(api_id: str) -&gt; ResultT[models.Api]\n</code></pre> <p>Gets information about an api.</p> <p>Parameters:</p> Name Type Description Default <code>api_id</code> <code>str</code> <p>The id of the api.</p> required <p>Returns:</p> Type Description <code>ResultT[models.Api]</code> <p>A result containing the requested information or an error.</p> Source code in <code>unkey/services/apis.py</code> <pre><code>async def get_api(self, api_id: str) -&gt; ResultT[models.Api]:\n\"\"\"Gets information about an api.\n    Args:\n        api_id: The id of the api.\n    Returns:\n        A result containing the requested information or an error.\n    \"\"\"\nroute = routes.GET_API.compile(api_id)\ndata = await self._http.fetch(route)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nif \"error\" in data:\nreturn result.Err(\nmodels.HttpResponse(\n404,\ndata[\"error\"],\nmodels.ErrorCode.from_str_maybe(data.get(\"code\", \"unknown\")),\n)\n)\nreturn result.Ok(self._serializer.to_api(data))\n</code></pre>"},{"location":"reference/services/#unkey.services.apis.ApiService.list_keys","title":"list_keys  <code>async</code>","text":"<pre><code>list_keys(\napi_id: str,\n*,\nowner_id: UndefinedOr[str] = UNDEFINED,\nlimit: int = 100,\noffset: int = 0\n) -&gt; ResultT[models.ApiKeyList]\n</code></pre> <p>Gets a paginated list of keys for the given api.</p> <p>Parameters:</p> Name Type Description Default <code>api_id</code> <code>str</code> <p>The id of the api.</p> required <p>Other Parameters:</p> Name Type Description <code>owner_id</code> <code>UndefinedOr[str]</code> <p>The optional owner id to list the keys for.</p> <code>limit</code> <code>int</code> <p>The max number of keys to include in this page. Defaults to 100.</p> <code>offset</code> <code>int</code> <p>How many keys to offset by, for pagination.</p> <p>Returns:</p> Type Description <code>ResultT[models.ApiKeyList]</code> <p>A result containing api key list or an error.</p> Source code in <code>unkey/services/apis.py</code> <pre><code>async def list_keys(\nself,\napi_id: str,\n*,\nowner_id: UndefinedOr[str] = UNDEFINED,\nlimit: int = 100,\noffset: int = 0,\n) -&gt; ResultT[models.ApiKeyList]:\n\"\"\"Gets a paginated list of keys for the given api.\n    Args:\n        api_id: The id of the api.\n    Keyword Args:\n        owner_id: The optional owner id to list the keys for.\n        limit: The max number of keys to include in this page.\n            Defaults to 100.\n        offset: How many keys to offset by, for pagination.\n    Returns:\n        A result containing api key list or an error.\n    \"\"\"\nparams = self._generate_map(ownerId=owner_id, limit=limit, offset=offset)\nroute = routes.GET_KEYS.compile(api_id).with_params(params)\ndata = await self._http.fetch(route)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nif \"error\" in data:\nreturn result.Err(\nmodels.HttpResponse(\n404,\ndata[\"error\"],\nmodels.ErrorCode.from_str_maybe(data.get(\"code\", \"unknown\")),\n)\n)\nreturn result.Ok(self._serializer.to_api_key_list(data))\n</code></pre>"},{"location":"reference/services/#unkey.services.BaseService","title":"BaseService","text":"<p>             Bases: <code>abc.ABC</code></p> <p>The base service all API services inherit from.</p> <p>Parameters:</p> Name Type Description Default <code>http_service</code> <code>HttpService</code> <p>The http service to use for requests.</p> required <code>serializer</code> <code>serializer.Serializer</code> <p>The serializer to use for handling incoming JSON data from the API.</p> required Source code in <code>unkey/services/base.py</code> <pre><code>class BaseService(abc.ABC):\n\"\"\"The base service all API services inherit from.\n    Args:\n        http_service: The http service to use for requests.\n        serializer: The serializer to use for handling incoming\n            JSON data from the API.\n    \"\"\"\n__slots__ = (\"_http\", \"_serializer\")\ndef __init__(self, http_service: HttpService, serializer: serializer.Serializer) -&gt; None:\nself._http = http_service\nself._serializer = serializer\ndef _generate_map(self, **kwargs: t.Any) -&gt; t.Dict[str, t.Any]:\nreturn {k: v for k, v in kwargs.items() if v is not undefined.UNDEFINED}\ndef _expires_in(\nself, *, milliseconds: int = 0, seconds: int = 0, minutes: int = 0, days: int = 0\n) -&gt; undefined.UndefinedOr[int]:\nif not any({milliseconds, seconds, minutes, days}):\nreturn undefined.UNDEFINED\ndelta = timedelta(days=days, minutes=minutes, seconds=seconds, milliseconds=milliseconds)\nreturn int((datetime.now() + delta).timestamp()) * 1000\n</code></pre>"},{"location":"reference/services/#unkey.services.HttpService","title":"HttpService","text":"<p>The HTTP service used to make requests to the unkey API.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The api key to use.</p> required <code>api_version</code> <code>t.Optional[int]</code> <p>The optional version of the api to use.</p> required <code>api_base_url</code> <code>t.Optional[str]</code> <p>The optional api base url to use.</p> required Source code in <code>unkey/services/http.py</code> <pre><code>class HttpService:\n\"\"\"The HTTP service used to make requests to the unkey API.\n    Args:\n        api_key: The api key to use.\n        api_version: The optional version of the api to use.\n        api_base_url: The optional api base url to use.\n    \"\"\"\n__slots__ = (\n\"_api_version\",\n\"_base_url\",\n\"_headers\",\n\"_ok_responses\",\n\"_method_mapping\",\n\"_session\",\n)\ndef __init__(\nself,\napi_key: str,\napi_version: t.Optional[int],\napi_base_url: t.Optional[str],\n) -&gt; None:\nif not api_key:\nraise ValueError(\"Api key must be provided.\")\nself._headers = {\n\"x-user-agent\": constants.USER_AGENT,\n\"Authorization\": f\"Bearer {api_key}\",\n}\nself._ok_responses = {200, 202}\nself._api_version = f\"/v{api_version or 1}\"\nself._base_url = api_base_url or constants.API_BASE_URL\nasync def _try_get_json(self, response: aiohttp.ClientResponse) -&gt; t.Any:\ntry:\nreturn await response.json()\nexcept Exception:\nif response.status not in self._ok_responses:\nreturn models.HttpResponse(response.status, await response.text())\nreturn await response.text()\nasync def _request(\nself, req: t.Callable[..., t.Awaitable[t.Any]], url: str, **kwargs: t.Any\n) -&gt; t.Any:\nresponse = await req(url, **kwargs)\ndata = await self._try_get_json(response)\nif isinstance(data, models.HttpResponse):\nreturn data\n# Skipping 404's seems hacky but whatever\nif response.status not in (*self._ok_responses, 404):\nreturn models.HttpResponse(\nresponse.status,\ndata.get(\"error\")\nor data.get(\"message\")\nor \"An unexpected error occurred while making the request.\",\n)\nreturn data\ndef _get_request_func(self, method: str) -&gt; t.Callable[..., t.Awaitable[t.Any]]:\nif not hasattr(self, \"_method_mapping\"):\nraise RuntimeError(\"HttpService.start was never called, aborting...\")\nreturn self._method_mapping[method]  # type: ignore\nasync def _init_session(self) -&gt; None:\nself._session = aiohttp.ClientSession()\nself._method_mapping = {\nconstants.GET: self._session.get,\nconstants.PUT: self._session.put,\nconstants.POST: self._session.post,\nconstants.PATCH: self._session.patch,\nconstants.DELETE: self._session.delete,\n}\ndef set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n        Args:\n            api_key: The new api key to use.\n        \"\"\"\nself._headers[\"x-api-key\"] = api_key\ndef set_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n        Args:\n            base_url: The new base url to use.\n        \"\"\"\nself._base_url = base_url\nasync def start(self) -&gt; None:\n\"\"\"Starts the client session to be used by the http service.\"\"\"\nif not hasattr(self, \"_session\") or self._session.closed:\nawait self._init_session()\nasync def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\"\"\"\nif hasattr(self, \"_session\") and not self._session.closed:\nawait self._session.close()\nasync def fetch(\nself,\nroute: routes.CompiledRoute,\n*,\npayload: t.Optional[t.Dict[str, t.Any]] = None,\n) -&gt; dict[str, t.Any] | models.HttpResponse:\n\"\"\"Fetches the given route.\n        Args:\n            route: The route to make the request to.\n            payload: The optional payload to send in the request body.\n        Returns:\n            The requested json data or the error response.\n        \"\"\"\nreturn await self._request(  # type: ignore[no-any-return]\nself._get_request_func(route.method),\nself._base_url + self._api_version + route.uri,\nheaders=self._headers,\nparams=route.params,\njson=payload or None,\n)\n</code></pre>"},{"location":"reference/services/#unkey.services.http.HttpService.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Closes the existing client session, if it's still open.</p> Source code in <code>unkey/services/http.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\"\"\"\nif hasattr(self, \"_session\") and not self._session.closed:\nawait self._session.close()\n</code></pre>"},{"location":"reference/services/#unkey.services.http.HttpService.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch(\nroute: routes.CompiledRoute,\n*,\npayload: t.Optional[t.Dict[str, t.Any]] = None\n) -&gt; dict[str, t.Any] | models.HttpResponse\n</code></pre> <p>Fetches the given route.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>routes.CompiledRoute</code> <p>The route to make the request to.</p> required <code>payload</code> <code>t.Optional[t.Dict[str, t.Any]]</code> <p>The optional payload to send in the request body.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, t.Any] | models.HttpResponse</code> <p>The requested json data or the error response.</p> Source code in <code>unkey/services/http.py</code> <pre><code>async def fetch(\nself,\nroute: routes.CompiledRoute,\n*,\npayload: t.Optional[t.Dict[str, t.Any]] = None,\n) -&gt; dict[str, t.Any] | models.HttpResponse:\n\"\"\"Fetches the given route.\n    Args:\n        route: The route to make the request to.\n        payload: The optional payload to send in the request body.\n    Returns:\n        The requested json data or the error response.\n    \"\"\"\nreturn await self._request(  # type: ignore[no-any-return]\nself._get_request_func(route.method),\nself._base_url + self._api_version + route.uri,\nheaders=self._headers,\nparams=route.params,\njson=payload or None,\n)\n</code></pre>"},{"location":"reference/services/#unkey.services.http.HttpService.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(api_key: str) -&gt; None\n</code></pre> <p>Sets the api key used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The new api key to use.</p> required Source code in <code>unkey/services/http.py</code> <pre><code>def set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n    Args:\n        api_key: The new api key to use.\n    \"\"\"\nself._headers[\"x-api-key\"] = api_key\n</code></pre>"},{"location":"reference/services/#unkey.services.http.HttpService.set_base_url","title":"set_base_url","text":"<pre><code>set_base_url(base_url: str) -&gt; None\n</code></pre> <p>Sets the api base url used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The new base url to use.</p> required Source code in <code>unkey/services/http.py</code> <pre><code>def set_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n    Args:\n        base_url: The new base url to use.\n    \"\"\"\nself._base_url = base_url\n</code></pre>"},{"location":"reference/services/#unkey.services.http.HttpService.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Starts the client session to be used by the http service.</p> Source code in <code>unkey/services/http.py</code> <pre><code>async def start(self) -&gt; None:\n\"\"\"Starts the client session to be used by the http service.\"\"\"\nif not hasattr(self, \"_session\") or self._session.closed:\nawait self._init_session()\n</code></pre>"},{"location":"reference/services/#unkey.services.KeyService","title":"KeyService","text":"<p>             Bases: <code>BaseService</code></p> <p>Handles api key related requests.</p> Source code in <code>unkey/services/keys.py</code> <pre><code>class KeyService(BaseService):\n\"\"\"Handles api key related requests.\"\"\"\n__slots__ = ()\nasync def create_key(\nself,\napi_id: str,\nowner_id: str,\nprefix: str,\n*,\nname: UndefinedOr[str] = UNDEFINED,\nbyte_length: UndefinedOr[int] = UNDEFINED,\nmeta: UndefinedOr[t.Dict[str, t.Any]] = UNDEFINED,\nexpires: UndefinedOr[int] = UNDEFINED,\nremaining: UndefinedOr[int] = UNDEFINED,\nratelimit: UndefinedOr[models.Ratelimit] = UNDEFINED,\n) -&gt; ResultT[models.ApiKey]:\n\"\"\"Creates a new api key.\n        Args:\n            name: The name to use for this key.\n            api_id: The id of the api this key is for.\n            owner_id: The owner id to use for this key. Represents the\n                user who will use this key.\n            prefix: The prefix to place at the beginning of the key.\n        Keyword Args:\n            byte_length: The optional desired length of they in bytes.\n                Defaults to 16.\n            meta: An optional dynamic mapping of information used to\n                provide context around this keys user.\n            expires: The optional number of milliseconds into the future\n                when this key should expire.\n            remaining: The optional max number of times this key can be\n                used. Useful for creating long lived keys but with a\n                limit on total uses.\n            ratelimit: The optional Ratelimit to set on this key.\n        Returns:\n            A result containing the requested information or an error.\n        \"\"\"\nroute = routes.CREATE_KEY.compile()\npayload = self._generate_map(\nmeta=meta,\nname=name,\napiId=api_id,\nprefix=prefix,\nownerId=owner_id,\nremaining=remaining,\nbyteLength=byte_length,\nexpires=self._expires_in(milliseconds=expires or 0),\nratelimit=None\nif not ratelimit\nelse self._generate_map(\nlimit=ratelimit.limit,\ntype=ratelimit.type.value,\nrefillRate=ratelimit.refill_rate,\nrefillInterval=ratelimit.refill_interval,\n),\n)\ndata = await self._http.fetch(route, payload=payload)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.to_api_key(data))\nasync def verify_key(self, key: str) -&gt; ResultT[models.ApiKeyVerification]:\n\"\"\"Verifies a key is valid and within ratelimit.\n        Args:\n            key: The key to verify.\n        Returns:\n            A result containing the api key verification or an error.\n        \"\"\"\nroute = routes.VERIFY_KEY.compile()\npayload = self._generate_map(key=key)\ndata = await self._http.fetch(route, payload=payload)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.to_api_key_verification(data))\nasync def revoke_key(self, key_id: str) -&gt; ResultT[models.HttpResponse]:\n\"\"\"Revokes a keys validity.\n        Args:\n            key_id: The id of the key to revoke.\n        Returns:\n            A result containing the http response or an error.\n        \"\"\"\nroute = routes.REVOKE_KEY.compile(key_id)\ndata = await self._http.fetch(route)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nif \"error\" in data:\nreturn result.Err(\nmodels.HttpResponse(\n404,\ndata[\"error\"],\nmodels.ErrorCode.from_str_maybe(data.get(\"code\", \"unknown\")),\n)\n)\nreturn result.Ok(models.HttpResponse(200, \"OK\"))\nasync def update_key(\nself,\nkey_id: str,\n*,\nname: UndefinedNoneOr[str] = UNDEFINED,\nowner_id: UndefinedNoneOr[str] = UNDEFINED,\nmeta: UndefinedNoneOr[t.Dict[str, t.Any]] = UNDEFINED,\nexpires: UndefinedNoneOr[int] = UNDEFINED,\nremaining: UndefinedNoneOr[int] = UNDEFINED,\nratelimit: UndefinedNoneOr[models.Ratelimit] = UNDEFINED,\n) -&gt; ResultT[models.HttpResponse]:\n\"\"\"Updates an existing api key. To delete a key set its value\n        to `None`.\n        Args:\n            key_id: The id of the key to update.\n        Keyword Args:\n            name: The new name to use for this key.\n            owner_id: The new owner id to use for this key.\n            meta: The new dynamic mapping of information used\n                to provide context around this keys user.\n            expires: The new number of milliseconds into the future\n                when this key should expire.\n            remaining: The new max number of times this key can be\n                used.\n            ratelimit: The new Ratelimit to set on this key.\n        Returns:\n            A result containing the OK response or an error.\n        \"\"\"\nif all_undefined(name, owner_id, meta, expires, remaining, ratelimit):\nraise errors.MissingRequiredArgument(\"At least one value is required to be updated.\")\nroute = routes.UPDATE_KEY.compile(key_id)\npayload = self._generate_map(\nname=name,\nmeta=meta,\nkeyId=key_id,\nownerId=owner_id,\nremaining=remaining,\nratelimit=ratelimit,\nexpires=self._expires_in(milliseconds=expires or 0)\nif expires is not None\nelse expires,\n)\ndata = await self._http.fetch(route, payload=payload)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nreturn result.Ok(models.HttpResponse(200, \"OK\"))\n</code></pre>"},{"location":"reference/services/#unkey.services.keys.KeyService.create_key","title":"create_key  <code>async</code>","text":"<pre><code>create_key(\napi_id: str,\nowner_id: str,\nprefix: str,\n*,\nname: UndefinedOr[str] = UNDEFINED,\nbyte_length: UndefinedOr[int] = UNDEFINED,\nmeta: UndefinedOr[t.Dict[str, t.Any]] = UNDEFINED,\nexpires: UndefinedOr[int] = UNDEFINED,\nremaining: UndefinedOr[int] = UNDEFINED,\nratelimit: UndefinedOr[models.Ratelimit] = UNDEFINED\n) -&gt; ResultT[models.ApiKey]\n</code></pre> <p>Creates a new api key.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>UndefinedOr[str]</code> <p>The name to use for this key.</p> <code>UNDEFINED</code> <code>api_id</code> <code>str</code> <p>The id of the api this key is for.</p> required <code>owner_id</code> <code>str</code> <p>The owner id to use for this key. Represents the user who will use this key.</p> required <code>prefix</code> <code>str</code> <p>The prefix to place at the beginning of the key.</p> required <p>Other Parameters:</p> Name Type Description <code>byte_length</code> <code>UndefinedOr[int]</code> <p>The optional desired length of they in bytes. Defaults to 16.</p> <code>meta</code> <code>UndefinedOr[t.Dict[str, t.Any]]</code> <p>An optional dynamic mapping of information used to provide context around this keys user.</p> <code>expires</code> <code>UndefinedOr[int]</code> <p>The optional number of milliseconds into the future when this key should expire.</p> <code>remaining</code> <code>UndefinedOr[int]</code> <p>The optional max number of times this key can be used. Useful for creating long lived keys but with a limit on total uses.</p> <code>ratelimit</code> <code>UndefinedOr[models.Ratelimit]</code> <p>The optional Ratelimit to set on this key.</p> <p>Returns:</p> Type Description <code>ResultT[models.ApiKey]</code> <p>A result containing the requested information or an error.</p> Source code in <code>unkey/services/keys.py</code> <pre><code>async def create_key(\nself,\napi_id: str,\nowner_id: str,\nprefix: str,\n*,\nname: UndefinedOr[str] = UNDEFINED,\nbyte_length: UndefinedOr[int] = UNDEFINED,\nmeta: UndefinedOr[t.Dict[str, t.Any]] = UNDEFINED,\nexpires: UndefinedOr[int] = UNDEFINED,\nremaining: UndefinedOr[int] = UNDEFINED,\nratelimit: UndefinedOr[models.Ratelimit] = UNDEFINED,\n) -&gt; ResultT[models.ApiKey]:\n\"\"\"Creates a new api key.\n    Args:\n        name: The name to use for this key.\n        api_id: The id of the api this key is for.\n        owner_id: The owner id to use for this key. Represents the\n            user who will use this key.\n        prefix: The prefix to place at the beginning of the key.\n    Keyword Args:\n        byte_length: The optional desired length of they in bytes.\n            Defaults to 16.\n        meta: An optional dynamic mapping of information used to\n            provide context around this keys user.\n        expires: The optional number of milliseconds into the future\n            when this key should expire.\n        remaining: The optional max number of times this key can be\n            used. Useful for creating long lived keys but with a\n            limit on total uses.\n        ratelimit: The optional Ratelimit to set on this key.\n    Returns:\n        A result containing the requested information or an error.\n    \"\"\"\nroute = routes.CREATE_KEY.compile()\npayload = self._generate_map(\nmeta=meta,\nname=name,\napiId=api_id,\nprefix=prefix,\nownerId=owner_id,\nremaining=remaining,\nbyteLength=byte_length,\nexpires=self._expires_in(milliseconds=expires or 0),\nratelimit=None\nif not ratelimit\nelse self._generate_map(\nlimit=ratelimit.limit,\ntype=ratelimit.type.value,\nrefillRate=ratelimit.refill_rate,\nrefillInterval=ratelimit.refill_interval,\n),\n)\ndata = await self._http.fetch(route, payload=payload)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.to_api_key(data))\n</code></pre>"},{"location":"reference/services/#unkey.services.keys.KeyService.revoke_key","title":"revoke_key  <code>async</code>","text":"<pre><code>revoke_key(key_id: str) -&gt; ResultT[models.HttpResponse]\n</code></pre> <p>Revokes a keys validity.</p> <p>Parameters:</p> Name Type Description Default <code>key_id</code> <code>str</code> <p>The id of the key to revoke.</p> required <p>Returns:</p> Type Description <code>ResultT[models.HttpResponse]</code> <p>A result containing the http response or an error.</p> Source code in <code>unkey/services/keys.py</code> <pre><code>async def revoke_key(self, key_id: str) -&gt; ResultT[models.HttpResponse]:\n\"\"\"Revokes a keys validity.\n    Args:\n        key_id: The id of the key to revoke.\n    Returns:\n        A result containing the http response or an error.\n    \"\"\"\nroute = routes.REVOKE_KEY.compile(key_id)\ndata = await self._http.fetch(route)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nif \"error\" in data:\nreturn result.Err(\nmodels.HttpResponse(\n404,\ndata[\"error\"],\nmodels.ErrorCode.from_str_maybe(data.get(\"code\", \"unknown\")),\n)\n)\nreturn result.Ok(models.HttpResponse(200, \"OK\"))\n</code></pre>"},{"location":"reference/services/#unkey.services.keys.KeyService.update_key","title":"update_key  <code>async</code>","text":"<pre><code>update_key(\nkey_id: str,\n*,\nname: UndefinedNoneOr[str] = UNDEFINED,\nowner_id: UndefinedNoneOr[str] = UNDEFINED,\nmeta: UndefinedNoneOr[t.Dict[str, t.Any]] = UNDEFINED,\nexpires: UndefinedNoneOr[int] = UNDEFINED,\nremaining: UndefinedNoneOr[int] = UNDEFINED,\nratelimit: UndefinedNoneOr[models.Ratelimit] = UNDEFINED\n) -&gt; ResultT[models.HttpResponse]\n</code></pre> <p>Updates an existing api key. To delete a key set its value to <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key_id</code> <code>str</code> <p>The id of the key to update.</p> required <p>Other Parameters:</p> Name Type Description <code>name</code> <code>UndefinedNoneOr[str]</code> <p>The new name to use for this key.</p> <code>owner_id</code> <code>UndefinedNoneOr[str]</code> <p>The new owner id to use for this key.</p> <code>meta</code> <code>UndefinedNoneOr[t.Dict[str, t.Any]]</code> <p>The new dynamic mapping of information used to provide context around this keys user.</p> <code>expires</code> <code>UndefinedNoneOr[int]</code> <p>The new number of milliseconds into the future when this key should expire.</p> <code>remaining</code> <code>UndefinedNoneOr[int]</code> <p>The new max number of times this key can be used.</p> <code>ratelimit</code> <code>UndefinedNoneOr[models.Ratelimit]</code> <p>The new Ratelimit to set on this key.</p> <p>Returns:</p> Type Description <code>ResultT[models.HttpResponse]</code> <p>A result containing the OK response or an error.</p> Source code in <code>unkey/services/keys.py</code> <pre><code>async def update_key(\nself,\nkey_id: str,\n*,\nname: UndefinedNoneOr[str] = UNDEFINED,\nowner_id: UndefinedNoneOr[str] = UNDEFINED,\nmeta: UndefinedNoneOr[t.Dict[str, t.Any]] = UNDEFINED,\nexpires: UndefinedNoneOr[int] = UNDEFINED,\nremaining: UndefinedNoneOr[int] = UNDEFINED,\nratelimit: UndefinedNoneOr[models.Ratelimit] = UNDEFINED,\n) -&gt; ResultT[models.HttpResponse]:\n\"\"\"Updates an existing api key. To delete a key set its value\n    to `None`.\n    Args:\n        key_id: The id of the key to update.\n    Keyword Args:\n        name: The new name to use for this key.\n        owner_id: The new owner id to use for this key.\n        meta: The new dynamic mapping of information used\n            to provide context around this keys user.\n        expires: The new number of milliseconds into the future\n            when this key should expire.\n        remaining: The new max number of times this key can be\n            used.\n        ratelimit: The new Ratelimit to set on this key.\n    Returns:\n        A result containing the OK response or an error.\n    \"\"\"\nif all_undefined(name, owner_id, meta, expires, remaining, ratelimit):\nraise errors.MissingRequiredArgument(\"At least one value is required to be updated.\")\nroute = routes.UPDATE_KEY.compile(key_id)\npayload = self._generate_map(\nname=name,\nmeta=meta,\nkeyId=key_id,\nownerId=owner_id,\nremaining=remaining,\nratelimit=ratelimit,\nexpires=self._expires_in(milliseconds=expires or 0)\nif expires is not None\nelse expires,\n)\ndata = await self._http.fetch(route, payload=payload)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nreturn result.Ok(models.HttpResponse(200, \"OK\"))\n</code></pre>"},{"location":"reference/services/#unkey.services.keys.KeyService.verify_key","title":"verify_key  <code>async</code>","text":"<pre><code>verify_key(key: str) -&gt; ResultT[models.ApiKeyVerification]\n</code></pre> <p>Verifies a key is valid and within ratelimit.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to verify.</p> required <p>Returns:</p> Type Description <code>ResultT[models.ApiKeyVerification]</code> <p>A result containing the api key verification or an error.</p> Source code in <code>unkey/services/keys.py</code> <pre><code>async def verify_key(self, key: str) -&gt; ResultT[models.ApiKeyVerification]:\n\"\"\"Verifies a key is valid and within ratelimit.\n    Args:\n        key: The key to verify.\n    Returns:\n        A result containing the api key verification or an error.\n    \"\"\"\nroute = routes.VERIFY_KEY.compile()\npayload = self._generate_map(key=key)\ndata = await self._http.fetch(route, payload=payload)\nif isinstance(data, models.HttpResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.to_api_key_verification(data))\n</code></pre>"},{"location":"reference/undefined/","title":"undefined","text":""},{"location":"reference/undefined/#unkey.undefined.UNDEFINED","title":"UNDEFINED  <code>module-attribute</code>","text":"<pre><code>UNDEFINED = Undefined()\n</code></pre> <p>A value that does not exist.</p>"},{"location":"reference/undefined/#unkey.undefined.UndefinedNoneOr","title":"UndefinedNoneOr  <code>module-attribute</code>","text":"<pre><code>UndefinedNoneOr = UndefinedOr[t.Optional[T]]\n</code></pre> <p>A value that is undefined, none, or T</p>"},{"location":"reference/undefined/#unkey.undefined.UndefinedOr","title":"UndefinedOr  <code>module-attribute</code>","text":"<pre><code>UndefinedOr = t.Union[T, Undefined]\n</code></pre> <p>A value that is undefined or T</p>"},{"location":"reference/undefined/#unkey.undefined.Undefined","title":"Undefined","text":"<p>Represents an undefined value - without being None.</p> Source code in <code>unkey/undefined.py</code> <pre><code>class Undefined:\n\"\"\"Represents an undefined value - without being None.\"\"\"\n__slots__ = ()\ndef __bool__(self) -&gt; t.Literal[False]:\nreturn False\ndef __copy__(self) -&gt; Undefined:\nreturn self\ndef __deepcopy__(self, memo: t.MutableMapping[int, t.Any]) -&gt; Undefined:\nmemo[id(self)] = self\nreturn self\ndef __getstate__(self) -&gt; t.Any:\nreturn False\ndef __repr__(self) -&gt; str:\nreturn \"UNDEFINED\"\ndef __reduce__(self) -&gt; str:\nreturn \"UNDEFINED\"\ndef __str__(self) -&gt; str:\nreturn \"UNDEFINED\"\n</code></pre>"},{"location":"reference/undefined/#unkey.undefined.all_undefined","title":"all_undefined","text":"<pre><code>all_undefined(*values: t.Any) -&gt; bool\n</code></pre> <p>Whether or not all values are undefined.</p> <p>Parameters:</p> Name Type Description Default <code>*values</code> <code>t.Any</code> <p>The values to check.</p> <code>()</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if all values were undefined.</p> Source code in <code>unkey/undefined.py</code> <pre><code>def all_undefined(*values: t.Any) -&gt; bool:\n\"\"\"Whether or not all values are undefined.\n    Arguments:\n        *values: The values to check.\n    Returns:\n        `True` if all values were undefined.\n    \"\"\"\nreturn all(v is UNDEFINED for v in values)\n</code></pre>"},{"location":"reference/undefined/#unkey.undefined.any_undefined","title":"any_undefined","text":"<pre><code>any_undefined(*values: t.Any) -&gt; bool\n</code></pre> <p>Whether or not any values are undefined.</p> <p>Parameters:</p> Name Type Description Default <code>*values</code> <code>t.Any</code> <p>The values to check.</p> <code>()</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if any values were undefined.</p> Source code in <code>unkey/undefined.py</code> <pre><code>def any_undefined(*values: t.Any) -&gt; bool:\n\"\"\"Whether or not any values are undefined.\n    Arguments:\n        *values: The values to check.\n    Returns:\n        `True` if any values were undefined.\n    \"\"\"\nreturn any(v is UNDEFINED for v in values)\n</code></pre>"}]}